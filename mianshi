从三个方面解释一个知识点：概述，实现，原理
面试常问知识点：java基础,mybatis,spring，springmvc,springboot,mysql,redis;shiro,springcloud

java基础---------

集合体系
Collection  --List  --ArrayList：线性表，顺序存储，数组，有序，允许重复，允许null，查询快，非线程安全
                    --LinkedList：线性表，链式存储，链表，有序，允许重复，允许null，增删快，非线程安全
                    --Vector：线性表，顺序存储，数组，有序，允许重复，synchronized线程安全，效率低
                    
            --Set   --HashSet：继承HashMap，
                    --LinkedHashSet：继承LinkedHashMap，
                    --TreeSet：
                    
       Map          --HashMap：线性表+链表，数组+链表，无序，允许键唯一null，查询增删快，非线程安全
                    --LinkedHashMap：继承HashMap，线性表+双向链表，无序，允许键唯一null，非线程安全
                    --ConcurrentHashMap：线程安全
                    
堆栈
栈：存放方法，基本类型变量，引用类型变量
堆：实例对象（new出来的）

字符类
String：final修饰，长度不可变，线程安全
StringBuffer：char数组，长度可变，非线程安全
StringBuilder：char数组，长度可变，synchronized线程安全

事务
定义：一组需要同时完成或同事失败的操作

事务的类型：JDBC事务，JTA（Java Transaction API）事务，容器事务

事务四个特性ACID
原子性（atomicity）：事务是数据库的逻辑工作单位，而且是必须是原子工作单位，对于其数据修改，要么全部执行，要么全部不执行。
一致性（consistency）：事务在完成时，必须是所有的数据都保持一致状态。在相关数据库中，所有规则都必须应用于事务的修改，以保持所有数据的完整性。（实例：转账，两个账户余额相加，值不变。）
隔离性（isolation）：一个事务的执行不能被其他事务所影响。
持久性（durability）：一个事务一旦提交，事物的操作便永久性的保存在DB中。即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。

事务七种传播行为
PROPAGATION_REQUIRED：如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。这是最常见的选择。
PROPAGATION_SUPPORTS：支持当前事务，如果当前没有事务，就以非事务方式执行。
PROPAGATION_MANDATORY：支持当前事务，如果当前没有事务，就抛出异常。
PROPAGATION_REQUIRES_NEW：新建事务，如果当前存在事务，把当前事务挂起。
PROPAGATION_NOT_SUPPORTED：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。
PROPAGATION_NEVER：以非事务方式执行，如果当前存在事务，则抛出异常。
最常用的是PROPAGATION_REQUIRED和PROPAGATION_REQUIRES_NEW

事务五个隔离级别
ISOLATION_DEFAULT：这是一个PlatfromTransactionManager默认的隔离级别，使用数据库默认的事务隔离级别.
另外四个与JDBC的隔离级别相对应；
ISOLATION_READ_UNCOMMITTED（可见未提交）：这是事务最低的隔离级别，它充许别外一个事务可以看到这个事务未提交的数据；会产生脏读，不可重复读和幻读。
ISOLATION_READ_COMMITTED（只见提交）：保证一个事务修改的数据提交后才能被另外一个事务读取。另外一个事务不能读取该事务未提交的数据；避免脏读，会产生不可重复读和幻像读。
ISOLATION_REPEATABLE_READ：避免脏读，不可重复读。会产生幻读
ISOLATION_SERIALIZABLE：这是花费最高代价但是最可靠的事务隔离级别。事务被处理为顺序执行。避免脏读，不可重复读，幻读

数据库------------
数据库优化
优化表结构：选用合适的数据类型，长度尽量小，字段是not null，设置int类型自增的主键，建立索引
优化sql语句：尽量不适用select *；表连接代替子查询；union all代替or；使引擎使用索引，而不是全表查询

索引
什么时候建立索引？
频繁作为查询条件的字段需要建立索引；频繁增删改的字段或表不建索引，每次操作都会更新索引，会降低效率
作为排序条件的字段建立索引，很大提升排序效率
作为统计或者分组条件的字段

索引的分类？

索引的建立？

什么样的sql语句会放弃使用索引，而使用全表查询？
避免使用%开头的通配符，不会使用索引
where子句中判断了null
对字段进行表达式操作
对字段进行函数操作
对等号左边的字段使用函数操作，算术运算和其他表达式操作

sql语句
sql执行顺序？
连接，on，where，group by，非聚合函数，having，聚合函数，order by，limit

聚合函数和非聚合函数--------
定义
聚合函数：针对表中多条记录，返回一条记录
非聚合函数：针对表中的字段，对所有记录的该字段进行操作

在哪里使用函数？
聚合函数可以在select和having子句中使用，不能在where子句中使用
非聚合函数可以在group by中使用，
若通过select子句返回多个字段，并且其中某个字段中使用聚合函数，将会出现错误

分组后使用聚合函数sum()，该sum()是全表的总和，还是分组的总和？

mybatis-------
防止sql注入：#{}防止sql注入，$不可以

spring-------
IOC：控制反转
传统方式是在需要使用对象的地方主动构建对象
控制反转方式是由spring构建对象，并交给ioc容器管理，在需要使用的地方，利用依赖注入获取

AOP：面向切面编程
优点：低耦合，高复用，扩展性，可维护性

DI：依赖注入
@Resource：根据name
@Autowire：根据类型

spring事务

springmvc--------

springboot-------
springboot和ssm的区别？
springboot为应用开发提供便利，本身并不提供任何服务，需要配合例如ssm框架使用

springboot的优点
减少配置：仅保留一个配置文件，通过配置类和注解的方式，减少配置文件，例如：在配置类的方法上使用@Bean，将返回值作为Bean交由IOC容器管理
简化部署：内置Tomcat

redis--------
内存中的数据结构存储系统，它可以用作缓存，持久化和消息中间件

支持的数据类型
String，hash，list，set，zset

怎么实现持久化
RDB(Redis DataBase)：对 redis 中的数据执行周期性的持久化。
AOF (Append-only file)：将每条写入命令作为日志，以 append-only 的模式写入一个日志文件中，在 redis 重启的时候，可以通过回放 AOF 日志中的写入指令来重新构建整个数据集


多线程--------
创建多线程的三种方式
继承Thread类，重写run()方法
实现Runnable接口，重写run()方法，将对象作为Thread(Runnable)参数创建线程类
实现Callable接口，重写call()方法，可以有返回值，FutureTask封装Callable实现类（FutureTask实现Future，继承Runnable），将对象作为Thread(Runnable)参数创建线程类

三种方式比较
接口方式可以共享一份资源，将FutureTask和Runnable接口当作资源，作为多个线程的参数；还可以另外继承一个类，但编程稍复杂
一般推荐接口方式创建线程

线程的状态
新建，就绪，运行，阻塞，终止

常见的线程方法
让步yield()：放弃cpu资源，并同其他线程再次争夺cpu控制权，不会释放锁
睡眠sleep(int)：线程暂停执行，不会释放锁，让同级和低级的线程争夺cpu控制权，
join()：主要作用是同步；在A线程中调用B线程的join(10)方法，表示A线程会等待B线程执行10毫秒后，A、B线程并行执行；在A线程中调用B线程的join()和join(0)方法，A、B串行执行

多线程共享数据的方式
若执行的操作都相同，用一个FutureTask创建多个线程
接口方式，将共享数据作为线程的变量，线程包含对变量的全部操作，创建多个线程负责对变量的不同操作

线程同步的方式

线程池框架Excutor

网络协议-------
网络协议三要素：
语义：解释控制信息每个部分的含义
语法：数据与控制信息的结构与格式
时序：对事件发生顺序的详细说明

常见协议
TCP/IP协议：传输控制协议，工作在运输层，面向连接；IP协议工作在网络层
UDP协议：用户数据报协议，工作在运输层，无连接
HTTP协议：超文本传输协议，工作在应用层，

网络七层结构模型
物理层，数据链路层，网络层，运输层，会话层，表示层，应用层

springcloud-------
springcloud和分布式：springcloud是实现分布式的一种技术

springcloud的组件
Eureka：微服务架构的注册中心，负责服务的注册与发现
Feign：是一个动态代理，利用aop将连接其它服务，发送网络请求，判断返回值，接收结果等一系列动作封装好
Ribbon：负责负载均衡，默认轮询算法
Hystrix：隔离、熔断、降级的框架
Zuul：微服务网关，根据请求的特征（映射关系）将请求分发到相应的服务中

消息中间件-------


